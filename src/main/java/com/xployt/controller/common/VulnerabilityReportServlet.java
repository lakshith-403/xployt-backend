package com.xployt.controller.common;

import com.google.gson.Gson;
import com.xployt.model.Attachment;
import com.xployt.model.GenericResponse;
import com.xployt.model.VulnerabilityReport;
import com.xployt.service.common.VulnerabilityReportService;
import com.xployt.util.CustomLogger;
import com.xployt.util.FileUploadUtil;
import com.xployt.util.JsonUtil;

import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

@WebServlet("/api/reports/vulnerability/*")
@MultipartConfig
public class VulnerabilityReportServlet extends HttpServlet {
    private VulnerabilityReportService vulnerabilityReportService;
    private static final Logger logger = CustomLogger.getLogger();

    @Override
    public void init() {
        vulnerabilityReportService = new VulnerabilityReportService();
    }

//    Gets a vulnerability report by ID
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        logger.info("Fetching vulnerability report by ID");
        String pathInfo = request.getPathInfo();
        if (pathInfo == null || pathInfo.isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Report ID not provided");
            return;
        }

        String reportId = pathInfo.substring(1);
        System.out.println("Report ID: " + reportId);
        GenericResponse report;
        try {
            report = vulnerabilityReportService.getVulnerabilityReport(Integer.parseInt(reportId));
        } catch (Exception e) {
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error fetching vulnerability report");
            return;
        }

        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        try {
            response.getWriter().write(JsonUtil.useGson().toJson(report));
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Error writing response", e);
        }
    }

//    Saves a vulnerability report
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {
        logger.info("Saving report");

        try {
            // Process multipart request
            FileUploadUtil.UploadResult uploadResult = FileUploadUtil.processMultipartRequest(request, response);
            if (uploadResult == null) {
                return;
            }

            String reportJson = uploadResult.getFormField("report");
            if (reportJson == null) {
                response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Report is required");
                return;
            }

            Gson gson = JsonUtil.useGson();
            VulnerabilityReport report = gson.fromJson(reportJson, VulnerabilityReport.class);
            logger.log(Level.INFO, "Report: {0}", report);

            //Extract attachment IDs from all steps
            List<String> attachmentIds = report.getSteps().stream()
                    .flatMap(step -> step.getAttachments().stream().map(Attachment::getId))
                    .collect(Collectors.toList());

            List<File> uploadedFiles = FileUploadUtil.processAttachments(
                    uploadResult.getFileItems(),
                    attachmentIds,
                    getServletContext(),
                    response
            );

            GenericResponse result = vulnerabilityReportService.createVulnerabilityReport(report);
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            response.getWriter().write(gson.toJson(result));

        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error creating VulnerabilityReport", e);
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error creating VulnerabilityReport");
        }
    }
}

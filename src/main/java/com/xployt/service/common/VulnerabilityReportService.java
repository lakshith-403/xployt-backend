package com.xployt.service.common;

import com.xployt.dao.common.VulnerabilityReportDAO;
import com.xployt.model.GenericResponse;
import com.xployt.model.VulnerabilityReport;
import com.xployt.util.CustomLogger;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class VulnerabilityReportService {
    private final VulnerabilityReportDAO vulnerabilityReportDAO;
    private final static Logger logger = CustomLogger.getLogger();

    public VulnerabilityReportService() {this.vulnerabilityReportDAO = new VulnerabilityReportDAO();}

    public GenericResponse createVulnerabilityReport(VulnerabilityReport report) throws SQLException {
        logger.log(Level.INFO, "Creating VulnerabilityReport for ", report.getHackerId());
        VulnerabilityReport createdReport = vulnerabilityReportDAO.createVulnerabilityReport(report);
        if (createdReport != null) {
            return new GenericResponse(createdReport, true, null, null);
        } else {
            logger.log(Level.SEVERE, "Failed to create VulnerabilityReport");
            return new GenericResponse(null, false, "Failed to create VulnerabilityReport", null);
        }
    }

    public GenericResponse getVulnerabilityReport(int reportId) throws SQLException {
        logger.log(Level.INFO, "Getting VulnerabilityReport for ", reportId);
        VulnerabilityReport report = vulnerabilityReportDAO.getVulnerabilityReportById(reportId);

        if (report != null) {
            return new GenericResponse(report, true, null, null);
        } else {
            logger.log(Level.SEVERE, "Failed to get VulnerabilityReport");
            return new GenericResponse(null, false, "Failed to get VulnerabilityReport", null);
        }
    }

  public GenericResponse updateVulnerabilityReport(VulnerabilityReport report) throws SQLException {
      logger.log(Level.INFO, "Updating VulnerabilityReport for reportId: {0}", report.getReportId());

      VulnerabilityReport updatedReport = null;

      switch (report.getStatus()) {
          case "Pending":
              updatedReport = vulnerabilityReportDAO.editVulnerabilityReport(report);
              break;
          case "More Info":
              updatedReport = vulnerabilityReportDAO.createVulnerabilityReport(report);
              if (updatedReport != null) {
                  vulnerabilityReportDAO.editReportAttachments(report.getReportId(), updatedReport.getReportId());
              }
              break;
          default:
              logger.log(Level.WARNING, "Unsupported status: {0}", report.getStatus());
              break;
      }

      if (updatedReport != null) {
          return new GenericResponse(updatedReport, true, null, null);
      } else {
          logger.log(Level.SEVERE, "Failed to update VulnerabilityReport");
          return new GenericResponse(null, false, "Failed to update VulnerabilityReport", null);
      }
  }
}

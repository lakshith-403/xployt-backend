package com.xployt.dao.common;

import com.xployt.model.Attachment;
import com.xployt.model.ReportStep;
import com.xployt.model.VulnerabilityReport;
import com.xployt.util.ContextManager;
import com.xployt.util.CustomLogger;

import javax.servlet.ServletContext;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class VulnerabilityReportDAO {
    private static final Logger logger = CustomLogger.getLogger();

    public VulnerabilityReportDAO() {}

    public VulnerabilityReport createVulnerabilityReport(VulnerabilityReport report) throws SQLException {
        String sql = "INSERT INTO BugReports " +
                "(projectId, hackerId, severity, vulnerabilityType, testDate, title, description, status) " +
                "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?)";

        ServletContext servletContext = ContextManager.getContext("DBConnection");
        Connection conn = (Connection) servletContext.getAttribute("DBConnection");

        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setString(2, report.getProjectId());
            stmt.setString(3, report.getHackerId());
            stmt.setString(4, report.getSeverity());
            stmt.setString(5, report.getVulnerabilityType());
            stmt.setDate(6, report.getTestDate());
            stmt.setString(7, report.getTitle());
            stmt.setString(8, report.getDescription());

            int affectedRows = stmt.executeUpdate();
            if(affectedRows > 0){
                insertSteps(conn, report.getId(), report.getSteps());
                return report;
            }
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "Error saving report", e.getMessage());
            throw e;
        }

        return report; // Return the created report
    }

    private void insertSteps(Connection conn, int reportId, List<ReportStep> steps) throws SQLException {
        String sql = "INSERT INTO BugReproduceSteps " +
                "(stepNumber, reportId, stepDescription) " +
                "VALUES (?, ?, ?)";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            for(ReportStep step : steps) {
                stmt.setString(1, step.getStepNumber());
                stmt.setInt(2, reportId);
                stmt.setString(3, step.getDescription());

                int affectedRows = stmt.executeUpdate();
                if(affectedRows > 0){
                    insertAttachments(conn, reportId, step.getAttachments());
                }
            }
        }catch (SQLException e) {
            logger.log(Level.SEVERE, "Error saving steps", e.getMessage());
            throw e;
        }
    }

    private void insertAttachments(Connection conn, int reportId, List<Attachment> attachments) throws SQLException {
        String sql = "INSERT INTO BugReportAttachment " +
                "(reportId, stepNumber, name, url) " +
                "VALUES (?, ?, ?, ?)";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            for (Attachment attachment : attachments) {
                stmt.setInt(1, reportId);
                stmt.setString(2, attachment.getId());
                stmt.setString(3, attachment.getName());
                stmt.setString(4, attachment.getUrl());
                stmt.executeUpdate();
            }
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "Error saving attachments", e.getMessage());
            throw e;
        }
    }
}


package com.xployt.dao.common;

import com.xployt.dao.hacker.HackerDAO;
import com.xployt.model.*;
import com.xployt.util.ContextManager;
import com.xployt.util.CustomLogger;

import javax.servlet.ServletContext;
import java.sql.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class VulnerabilityReportDAO {
    private static final Logger logger = CustomLogger.getLogger();
    private static final String blastPointsCategory = "report_submission";
    BlastPointsDAO blastPointsDAO;

    public VulnerabilityReportDAO() {
        blastPointsDAO = new BlastPointsDAO();
    }

    public VulnerabilityReport createVulnerabilityReport(VulnerabilityReport report) throws SQLException {
        logger.log(Level.INFO, "ReportDAO: Creating report");
        String sql = "INSERT INTO BugReports " +
                "(projectId, hackerId, severity, vulnerabilityType, title, description, status) " +
                "VALUES ( ?, ?, ?, ?, ?, ?, 'Pending')";

        ServletContext servletContext = ContextManager.getContext("DBConnection");
        Connection conn = (Connection) servletContext.getAttribute("DBConnection");

        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, Integer.parseInt(report.getProjectId()));
            stmt.setInt(2, Integer.parseInt(report.getHackerId()));
            stmt.setString(3, report.getSeverity());
            stmt.setString(4, report.getVulnerabilityType());
//            stmt.setString(5, report.getTestDate());
//            logger.log(Level.INFO, "ReportDAO: Inserting testDate: " + report.getTestDate());
            stmt.setString(5, report.getTitle());
            stmt.setString(6, report.getDescription());
            int affectedRows = stmt.executeUpdate();
            if (affectedRows > 0) {
                try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        report.setReportId(generatedKeys.getInt(1));
                    }
                }
                insertSteps(conn, report.getReportId(), report.getSteps());
                blastPointsDAO.addUserBlastPoints(Integer.parseInt(report.getHackerId()), blastPointsCategory,
                        "successful_report_submission");

                //    Notification
                HackerDAO hackerDAO = new HackerDAO();
                PublicUser validator = hackerDAO.getAssignedValidator(report.getHackerId(), report.getProjectId());
                NotificationDAO notificationDAO = new NotificationDAO();
                notificationDAO.createNotification(
                        validator.getUserId(),
                        "Report Submission - Project #" + report.getProjectId(),
                        "Report "+ report.getReportId() + " for pending validation",
                        "/reports/vulnerability/" + report.getProjectId() + "/" + report.getReportId()
                );

                return report;
            }
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "Error saving report", e);
            throw e;
        }

        return report; // Return the created report
    }

    private void insertSteps(Connection conn, int reportId, List<ReportStep> steps) throws SQLException {
        logger.log(Level.INFO, "ReportDAO: Saving steps");
        String sql = "INSERT INTO BugReproduceSteps " +
                "(stepNumber, reportId, stepDescription) " +
                "VALUES (?, ?, ?)";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            for (ReportStep step : steps) {
                stmt.setInt(1, step.getStepNumber());
                stmt.setInt(2, reportId);
                stmt.setString(3, step.getDescription());

                int affectedRows = stmt.executeUpdate();
                if (affectedRows > 0) {
                    insertAttachments(conn, reportId, step.getStepNumber(), step.getAttachments());
                }
            }
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "Error saving steps", e);
            throw e;
        }
    }

    private void insertAttachments(Connection conn, int reportId, int stepNumber, List<Attachment> attachments) throws SQLException {
        logger.log(Level.INFO, "ReportDAO: Saving attachments");
        String sqlInsertReportAttachment = "INSERT INTO BugReportAttachment (id, stepNumber, reportId) VALUES (?, ?, ?)";
        String sqlInsertAttachment = "INSERT INTO Attachment (id, name, url) VALUES (?, ?, ?)";

        try (PreparedStatement stmtReport = conn.prepareStatement(sqlInsertReportAttachment);
             PreparedStatement stmtAttachment = conn.prepareStatement(sqlInsertAttachment)) {
            for (Attachment attachment : attachments) {
                stmtAttachment.setString(1, attachment.getId());
                stmtAttachment.setString(2, attachment.getName());
                stmtAttachment.setString(3, attachment.getUrl());
                stmtAttachment.executeUpdate();

                stmtReport.setString(1, attachment.getId());
                stmtReport.setInt(2, stepNumber);
                stmtReport.setInt(3, reportId);
                stmtReport.executeUpdate();
            }
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "Error saving attachments", e);
            throw e;
        }
    }

    public VulnerabilityReport getVulnerabilityReportById(int reportId) throws SQLException {
        String sql = "SELECT * FROM BugReports WHERE reportId = ?";
        VulnerabilityReport report = null;

        ServletContext servletContext = ContextManager.getContext("DBConnection");
        Connection conn = (Connection) servletContext.getAttribute("DBConnection");

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, reportId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                report = new VulnerabilityReport(
                        rs.getInt("reportId"),
                        rs.getString("projectId"),
                        rs.getString("hackerId"),
                        rs.getString("status"),
                        rs.getString("severity"),
                        rs.getString("vulnerabilityType"),
                        rs.getString("title"),
                        rs.getString("description"),
                        getReportSteps(reportId, conn)
                );
            }
        } catch (SQLException e) {
            System.out.println("Error fetching report: " + e.getMessage());
            throw e;
        }

        return report;
    }

    private List<ReportStep> getReportSteps(int reportId, Connection conn) throws SQLException {
        String sql = "SELECT * FROM BugReproduceSteps WHERE reportId = ?";
        List<ReportStep> steps = new ArrayList<>();

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, reportId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                steps.add(new ReportStep(
                        rs.getInt("stepNumber"),
                        rs.getString("stepDescription"),
                        getAttachmentsForStep(reportId, rs.getInt("stepNumber"), conn)
                ));
            }
        } catch (SQLException e) {
            System.out.println("Error fetching steps: " + e.getMessage());
            throw e;
        }

        steps.sort(Comparator.comparingInt(ReportStep::getStepNumber));
        return steps;
    }

    private List<Attachment> getAttachmentsForStep(int reportId, int stepNumber, Connection conn) throws SQLException {
        String sql = "SELECT * FROM Attachment WHERE id IN (SELECT id FROM BugReportAttachment WHERE reportId = ? AND stepNumber = ?)";
        List<Attachment> attachments = new ArrayList<>();

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, reportId);
            stmt.setInt(2, stepNumber);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Attachment attachment = new Attachment(
                        rs.getString("id"),
                        rs.getString("name"),
                        rs.getString("url")
                );
                attachments.add(attachment);
            }
        } catch (SQLException e) {
            System.out.println("Error fetching attachments: " + e.getMessage());
            throw e;
        }

        return attachments;
    }

    public VulnerabilityReport editVulnerabilityReport(VulnerabilityReport report) throws SQLException {
        String sql = "UPDATE BugReports SET status = ?, severity = ?, vulnerabilityType = ?, title = ?, description = ? WHERE reportId = ?";
        ServletContext servletContext = ContextManager.getContext("DBConnection");
        Connection conn = (Connection) servletContext.getAttribute("DBConnection");

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, report.getStatus());
            stmt.setString(2, report.getSeverity());
            stmt.setString(3, report.getVulnerabilityType());
            stmt.setString(4, report.getTitle());
            stmt.setString(5, report.getDescription());
            stmt.setInt(6, report.getReportId());

            int affectedRows = stmt.executeUpdate();
            if (affectedRows > 0) {
                logger.log(Level.INFO, "Report updated successfully");
                editReportSteps(conn, report.getReportId(), report.getSteps());
            } else {
                logger.log(Level.WARNING, "No report found with the given ID");
            }
        } catch (SQLException e) {
            System.out.println("Error updating report: " + e.getMessage());
            throw e;
        }

        return report;
    }

    private void editReportSteps(Connection conn, int reportId, List<ReportStep> steps) throws SQLException {
        String sql = "UPDATE BugReproduceSteps SET stepDescription = ? WHERE reportId = ? AND stepNumber = ?";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            for (ReportStep step : steps) {
                stmt.setString(1, step.getDescription());
                stmt.setInt(2, reportId);
                stmt.setInt(3, step.getStepNumber());
                int affectedRows = stmt.executeUpdate();
                if (affectedRows > 0) {
                    insertAttachments(conn, reportId, step.getStepNumber(), step.getAttachments());
                }
            }
        } catch (SQLException e) {
            System.out.println("Error updating steps: " + e.getMessage());
            throw e;
        }
    }

    public void editReportAttachments(int reportId, int oldReportId) throws SQLException {
        String sql = "UPDATE BugReportAttachment SET reportId = ? WHERE reportId = ?";

        ServletContext servletContext = ContextManager.getContext("DBConnection");
        Connection conn = (Connection) servletContext.getAttribute("DBConnection");

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, reportId);
            stmt.setInt(2, oldReportId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println("Error updating attachments: " + e.getMessage());
            throw e;
        }
    }
}





